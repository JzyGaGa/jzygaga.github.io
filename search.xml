<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>准备编辑的博客</title>
      <link href="/2019/01/02/%E5%87%86%E5%A4%87%E7%BC%96%E8%BE%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/01/02/%E5%87%86%E5%A4%87%E7%BC%96%E8%BE%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>工厂模式</title>
      <link href="/2019/01/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/01/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>工厂模式</title>
      <link href="/2019/01/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E4%BA%A7%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/01/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E4%BA%A7%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>lamda</title>
      <link href="/2018/12/29/lamda/"/>
      <url>/2018/12/29/lamda/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA8新特性——Lamda表达式"><a href="#JAVA8新特性——Lamda表达式" class="headerlink" title="JAVA8新特性——Lamda表达式"></a>JAVA8新特性——Lamda表达式</h1><h2 id="Lamda表达式，读作λ表达式，它实质属于函数式编程的概念，要理解函数式编程的产生目的，就要先理解匿名内部类。"><a href="#Lamda表达式，读作λ表达式，它实质属于函数式编程的概念，要理解函数式编程的产生目的，就要先理解匿名内部类。" class="headerlink" title="Lamda表达式，读作λ表达式，它实质属于函数式编程的概念，要理解函数式编程的产生目的，就要先理解匿名内部类。"></a>Lamda表达式，读作λ表达式，它实质属于函数式编程的概念，要理解函数式编程的产生目的，就要先理解匿名内部类。</h2><ul><li><p>先来看看传统的匿名内部类调用方式:</p><pre><code>interface MyInterface{    void lMethod();}public class Main {    public static void test(MyInterface myInterface){        myInterface.lMethod();    }    public static void main(String[] args) {        test(new MyInterface() {            @Override            public void lMethod() {                System.out.println(&quot;Hello World!&quot;);            }        });    }}</code></pre><p>　在主类中的这么几行代码，嵌套几层就为了输出一个Hello World！是不是很麻烦？但是由于java结构的完整性，我们还不得不那么做，现在JDK1.8来了。</p></li><li><p>再来看看使用Lamda表达式改写上面的代码：</p><pre><code> interface Myinterface{    void IMethod(); }public class Main {    public static void test(Myinterface myinterface){        myinterface.IMethod();    }    public static void main(String[] args) {        test(()-&gt; System.out.println(&quot;666&quot;));    }}</code></pre><p>这就是Lamda表达式语言，为了解决匿名内部类繁杂的操作而出现。</p></li><li><p>Lamda语法有三种形式：</p><ol><li>(参数) -&gt;单行语句；</li><li>(参数) -&gt;{多行语句}；</li><li><p>(参数) -&gt;表达式；<br>括号（）可以大致理解为就是方法，里面是参数变量，在上面的例子中()-&gt;System.out.println(“Hello World!”) 前面的()代表void lMethod()方法，它没有入参，所以为空，-&gt;后面是一个单行语句；<br>如果-&gt;后面是多行语句，需要用{ }装起来，每条语句后需要有分号;<br>-&gt;后面也可以是一个表达式，如：a+b等。</p><ul><li><p>(参数) -&gt;单行语句；</p><pre><code> interface MyInterface{    void lMethod(String str);}public class Main {    public static void test(MyInterface myInterface){        myInterface.lMethod(&quot;Hello World!&quot;);//设置参数内容    }    public static void main(String[] args) {        //首先在()中定义此表达式里面需要接收变量s，后面的单行语句中就可以使用该变量了        test((s)-&gt;System.out.println(s));    }}</code></pre></li><li><p>(参数) -&gt;多行语句；</p><pre><code> interface Myinterface{    void IMethod(String str); }public class Main {    public static void test(Myinterface myinterface){        myinterface.IMethod(&quot;hello word&quot;);    }    public static void main(String[] args) {        test((s)-&gt; {            s=s+s;            System.out.println(s);        });    }}</code></pre><p>　这样，Lamda表达式就看起来很简单了，有不有！</p></li></ul></li></ol></li></ul><p>　　匿名内部类，我们比较常用的地方在哪儿？线程类Thread，以前我们可能这样写：</p><h2 id="总结：利用Lamda表达式是为了避免匿名内部类定义过多无用的操作。"><a href="#总结：利用Lamda表达式是为了避免匿名内部类定义过多无用的操作。" class="headerlink" title="总结：利用Lamda表达式是为了避免匿名内部类定义过多无用的操作。"></a>总结：利用Lamda表达式是为了避免匿名内部类定义过多无用的操作。</h2>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lamda </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>leetcode</title>
      <link href="/2018/12/20/211.%20Add%20and%20Search%20Word%20-%20Data%20structure%20design/"/>
      <url>/2018/12/20/211.%20Add%20and%20Search%20Word%20-%20Data%20structure%20design/</url>
      
        <content type="html"><![CDATA[<h1 id="211-Add-and-Search-Word-Data-structure-design"><a href="#211-Add-and-Search-Word-Data-structure-design" class="headerlink" title="211. Add and Search Word - Data structure design"></a>211. Add and Search Word - Data structure design</h1><p><strong> Design a data structure that supports the following two operations:</strong> </p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><pre><code>addWord(&quot;bad&quot;)addWord(&quot;dad&quot;)addWord(&quot;mad&quot;)search(&quot;pad&quot;) -&gt; falsesearch(&quot;bad&quot;) -&gt; truesearch(&quot;.ad&quot;) -&gt; truesearch(&quot;b..&quot;) -&gt; true</code></pre><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>class WordDictionary {private class Node{    public boolean isWord;    public TreeMap&lt;Character,Node&gt; next;public Node(boolean isWord) {    this.isWord=isWord;    next=new TreeMap&lt;&gt;();}public Node() {    this(false);}}private Node root;private int size;/** Initialize your data structure here. */public WordDictionary() {    root=new Node();    size=0;}/** Adds a word into the data structure. */public void addWord(String word) {    Node cur=root;    for(int i=0;i&lt;word.length();i++) {        char c = word.charAt(i);        if(cur.next.get(c)==null) {            cur.next.put(c, new Node());        }        cur=cur.next.get(c);    }    cur.isWord=true;    size++;}/** Returns if the word is in the data structure. A word could contain the dot character &apos;.&apos; to represent any one letter. */public boolean search(String word) {    int i=0;    Node cur=root;    return recurtionSearch(i,word,cur);}private boolean recurtionSearch(int i,String str,Node cur) {    if(i==str.length())        return cur.isWord;    char m=str.charAt(i);    if(m!=&apos;.&apos;) {        if(cur.next.get(m)==null)            return false;        return recurtionSearch(++i, str,cur.next.get(m));    }else {        //这个逻辑，就跳过点.这个位置        for(char c:cur.next.keySet())            if(recurtionSearch(++i, str,cur.next.get(c)))                return true;        return false;    }}//    public static void main(String[] args) {//        WordDictionary wordDictionary = new WordDictionary();//        wordDictionary.addWord(&quot;123&quot;);//        ;//        System.out.println(wordDictionary.search(&quot;.3&quot;));//    }}/** * Your WordDictionary object will be instantiated and called as such: * WordDictionary obj = new WordDictionary(); * obj.addWord(word); * boolean param_2 = obj.search(word); */</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode Trie </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>leetcode</title>
      <link href="/2018/12/20/leetcode-208.%20Implement%20Trie%20(Prefix%20Tree)%20-%20%E5%89%AF%E6%9C%AC/"/>
      <url>/2018/12/20/leetcode-208.%20Implement%20Trie%20(Prefix%20Tree)%20-%20%E5%89%AF%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="208-Implement-Trie-Prefix-Tree"><a href="#208-Implement-Trie-Prefix-Tree" class="headerlink" title="208. Implement Trie (Prefix Tree)"></a>208. Implement Trie (Prefix Tree)</h1><p><strong> Implement a trie with insert, search, and startsWith methods. </strong> </p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>Trie trie = new Trie();<br>trie.insert(“apple”);<br>trie.search(“apple”);   // returns true<br>trie.search(“app”);     // returns false<br>trie.startsWith(“app”); // returns true<br>trie.insert(“app”);<br>trie.search(“app”);     // returns true *</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>class Trie {private class Node {    public boolean isWord;    public TreeMap&lt;Character, Node&gt; next;    public Node(boolean isWord) {        next = new TreeMap&lt;&gt;();        this.isWord = isWord;    }    public Node() {        this(false);    }}private Node root;private int size;/** Initialize your data structure here. */public Trie() {    root=new Node();    size=0;}/** Inserts a word into the trie. */public void insert(String word) {    Node cur=root;        for(int i=0;i&lt;word.length();i++) {            char c = word.charAt(i);            Node node = cur.next.get(c);            if(node==null)                cur.next.put(c, new Node());            cur=cur.next.get(c);        }        cur.isWord=true;}/** Returns if the word is in the trie. */public boolean search(String word) {    Node cur=root;        for(int i=0;i&lt;word.length();i++) {            char c = word.charAt(i);            if(cur.next.get(c)==null) {                return false;            }            cur=cur.next.get(c);        }    return cur.isWord;}/** * Returns if there is any word in the trie that starts with the given prefix. */public boolean startsWith(String prefix) {    Node cur=root;    for(int i=0;i&lt;prefix.length();i++) {        char c = prefix.charAt(i);        if(cur.next.get(c)==null) {            return false;        }        cur=cur.next.get(c);    }    return true;}//    public static void main(String[] args) {//        String[] arr= {&quot;Trie&quot;,&quot;insert&quot;,&quot;search&quot;,&quot;startWith&quot;,&quot;insert&quot;,&quot;search&quot;};//        Trie trie = new Trie();//        for(int i=0;i&lt;arr.length;i++)//            trie.insert(arr[i]);//        System.out.println(trie.startsWith(&quot;tr&quot;));//        System.out.println(trie.startsWith(&quot;in&quot;));//        System.out.println(trie.startsWith(&quot;sea&quot;));//        System.out.println(trie.search(&quot;Trie&quot;));//        System.out.println(trie.search(&quot;insert&quot;));//        System.out.println(trie.search(&quot;word&quot;));//    }}/*** Your Trie object will be instantiated and called as such:* Trie obj = new Trie();* obj.insert(word);* boolean param_2 = obj.search(word);* boolean param_3 = obj.startsWith(prefix);*/</code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Trie </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>递归入门</title>
      <link href="/2018/12/16/%E9%80%92%E5%BD%92%E5%85%A5%E9%97%A8/"/>
      <url>/2018/12/16/%E9%80%92%E5%BD%92%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>多线程</title>
      <link href="/2018/12/14/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2018/12/14/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/swmpvzO.jpg" alt="dddddd"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>capon</title>
      <link href="/2018/12/05/capon/"/>
      <url>/2018/12/05/capon/</url>
      
        <content type="html"><![CDATA[<p>哒哒哒哒哒哒所多fdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa哒哒哒哒哒哒所多fdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa哒哒哒哒哒哒所多fdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa哒哒哒哒哒哒所多fdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa哒哒哒哒哒哒所多fdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa哒哒哒哒哒哒所多fdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa哒哒哒哒哒哒所多fdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa哒哒哒哒哒哒所多fdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa哒哒哒哒哒哒所多fdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa哒哒哒哒哒哒所多fdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa哒哒哒哒哒哒所多fdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa哒哒哒哒哒哒所多fdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa哒哒哒哒哒哒所多fdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa哒哒哒哒哒哒所多fdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa哒哒哒哒哒哒所多fdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa哒哒哒哒哒哒所多fdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa哒哒哒哒哒哒所多fdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa哒哒哒哒哒哒所多fdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa哒哒哒哒哒哒所多fdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa哒哒哒哒哒哒所多fdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</p>]]></content>
      
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我滴妈</title>
      <link href="/2018/12/05/basic12/"/>
      <url>/2018/12/05/basic12/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>123321是一个非常特殊的数，它从左边读和从右边读是一样的。<br>　　输入一个正整数n， 编程求所有这样的五位和六位十进制数，满足各位数字之和等于n 。</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h1><p>　　输入一行，包含一个正整数n。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h1><p>　　按从小到大的顺序输出满足条件的整数，每个整数占一行。</p><p>说明：在本题中，答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。<br>    package algorithm.Lanqiao.基础练习;</p><pre><code>import java.util.Scanner;public class base9 {public static void main(String[] args) {    int n;    Scanner in = new Scanner(System.in);    n = in.nextInt();    in.close();    //5位的    for (int i = 1; i &lt; 10; i++) {        for (int j = 0; j &lt; 10; j++) {            for (int k = 0; k &lt; 10; k++) {                if (i * 2 + j * 2 + k == n) {                    System.out.print(i);                    System.out.print(j);                    System.out.print(k);                    System.out.print(j);                    System.out.print(i);                    System.out.println();                }            }        }    }    //6位的    for (int i = 1; i &lt; 10; i++) {        for (int j = 0; j &lt; 10; j++) {            for (int k = 0; k &lt; 10; k++) {                if (i * 2 + j * 2 + k * 2 == n) {                    System.out.print(i);                    System.out.print(j);                    System.out.print(k);                    System.out.print(k);                    System.out.print(j);                    System.out.print(i);                    System.out.println();                }            }        }    }}</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我滴妈</title>
      <link href="/2018/12/05/%E8%93%9D%E6%A1%A5%E8%A2%AB%E5%85%A5%E9%97%A8%E9%A2%98%E7%AC%AC%E4%B8%80%E9%A2%98/"/>
      <url>/2018/12/05/%E8%93%9D%E6%A1%A5%E8%A2%AB%E5%85%A5%E9%97%A8%E9%A2%98%E7%AC%AC%E4%B8%80%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>Fibonacci数列的递推公式为：Fn=Fn-1+Fn-2，其中F1=F2=1。</p><p>当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h1><p>输入包含一个整数n。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h1><p>输出一行，包含一个整数，表示Fn除以10007的余数。</p><p>说明：在本题中，答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。</p><pre><code>package begin4;import java.util.Scanner;public class Main {    public static void main(String[] args) {        int[] f= new int[1000001];        f[1] = f[2] = 1;        for (int i = 3; i &lt;= 1000000; i++) {            f[i] = (f[i-1] + f[i-2]) % 10007;        }        Scanner in = new Scanner(System.in);        System.out.println(f[in.nextInt()]);        in.close();    }}</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nihao,exo</title>
      <link href="/2018/12/05/nihao-exo/"/>
      <url>/2018/12/05/nihao-exo/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/12/05/hello-world/"/>
      <url>/2018/12/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
